import os
import re
import sys
from textwrap import TextWrapper

import click
from fontTools.ttLib import TTFont

# Fork of fontTools.misc.cliTools.makeOutputFileName.
# Output dir will be automatically created if it doesn't exist.
numberAddedRE = re.compile(r"#\d+$")


def makeOutputFileName(inputFile, outputDir=None, extension=None, overWrite=False):
    """Generates a suitable file name for writing output.

    Often tools will want to take a file, do some kind of transformation to it,
    and write it out again. This function determines an appropriate name for the
    output file, through one or more of the following steps:

    - changing the output directory
    - replacing the file extension
    - suffixing the filename with a number (``#1``, ``#2``, etc.) to avoid
      overwriting an existing file.

    Args:
        inputFile: Name of input file.
        outputDir: Optionally, a new directory to write the file into.
        extension: Optionally, a replacement for the current file extension.
        overWrite: Overwriting an existing file is permitted if true; if false
            and the proposed filename exists, a new name will be generated by
            adding an appropriate number suffix.

    Returns:
        str: Suitable output filename
    """
    dirName, fileName = os.path.split(inputFile)
    fileName, ext = os.path.splitext(fileName)
    if outputDir:
        # BEGIN EDIT
        if not os.path.exists(outputDir):
            os.mkdir(outputDir)
        # END EDIT
        dirName = outputDir
    fileName = numberAddedRE.split(fileName)[0]
    if extension is None:
        extension = os.path.splitext(inputFile)[1]
    output = os.path.join(dirName, fileName + extension)
    n = 1
    if not overWrite:
        while os.path.exists(output):
            output = os.path.join(
                dirName, fileName + "#" + repr(n) + extension)
            n += 1
    return output


def getFontsList(input_path: str) -> list:
    files = []

    if os.path.isfile(input_path):
        try:
            font = TTFont(input_path)
            files.append(input_path)
        except:
            pass

    if os.path.isdir(input_path):
        for f in os.listdir(input_path):
            try:
                font = TTFont(os.path.join(input_path, f))
                files.append(os.path.join(input_path, f))
            except:
                pass

    if len(files) == 0:
        print('\nNo valid font files found.')
        sys.exit()

    return files


def getConfigPath(input_path: str) -> str:

    config_file = os.path.join(os.path.dirname(input_path), 'config.json') if os.path.isfile(
        input_path) else os.path.join(input_path, 'config.json')

    return config_file


def getJsonPath(input_path: str) -> str:

    json_file = os.path.join(os.path.dirname(input_path), 'fonts.json') if os.path.isfile(
        input_path) else os.path.join(input_path, 'fonts.json')

    return json_file


def getCsvPath(input_path: str) -> str:
    data_file = os.path.join(os.path.dirname(input_path), 'data.csv') if os.path.isfile(
        input_path) else os.path.join(input_path, 'data.csv')
    return data_file


def wrapString(string: str, initial_indent: int, indent: int, max_lines: int, width: int) -> str:
    wrapped_string = TextWrapper(
        initial_indent=" " * initial_indent,
        subsequent_indent=" " * indent,
        max_lines=max_lines,
        break_on_hyphens=True,
        break_long_words=True,
        width=width
    ).fill(string)
    return wrapped_string


def guessFamilyName(font: TTFont) -> str:
    family_name = None

    try:
        family_name = font['name'].getName(16, 3, 1, 0x409).toUnicode()
    except AttributeError:
        try:
            family_name = font['name'].getName(16, 1, 0, 0x0).toUnicode()
        except AttributeError:
            try:
                family_name = font['name'].getName(1, 3, 1, 0x409).toUnicode()
            except AttributeError:
                try:
                    family_name = font['name'].getName(1, 1, 0, 0x0).toUnicode()
                except AttributeError:
                    pass
    except Exception as e:
        click.secho('ERROR: {}'.format(e))

    return family_name


def getSourceString(font_file : str, string_source: str) -> str:
    font = TTFont(font_file)
    file_name = os.path.basename(font_file)
    name_table = font['name']
    is_cff = 'CFF ' in font

    # Get the source string
    string = None

    if string_source == 'fname':
        string = os.path.splitext(file_name)[0]

    if string_source == '1_1_2':
        str1 = str(name_table.getName(1, 1, 0, 0x0))
        str2 = str(name_table.getName(2, 1, 0, 0x0))
        string = str1 + ' ' + str2

    if string_source == '1_4':
        string = str(name_table.getName(4, 1, 0, 0x0))

    if string_source == '1_6':
        string = str(name_table.getName(6, 1, 0, 0x0))

    if string_source == '1_16_17':
        str1 = str(name_table.getName(16, 1, 0, 0x0))
        str2 = str(name_table.getName(17, 1, 0, 0x0))
        string = str1 + ' ' + str2

    if string_source == '1_18':
        string = str(name_table.getName(18, 1, 0, 0x0))

    if string_source == '3_1_2':
        str1 = str(name_table.getName(1, 3, 1, 0x409))
        str2 = str(name_table.getName(2, 3, 1, 0x409))
        string = str1 + ' ' + str2

    if string_source == '3_4':
        string = str(name_table.getName(4, 3, 1, 0x409))

    if string_source == '3_6':
        string = str(name_table.getName(6, 3, 1, 0x409))

    if string_source == '3_16_17':
        str1 = str(name_table.getName(16, 3, 1, 0x409))
        str2 = str(name_table.getName(17, 3, 1, 0x409))
        string = str1 + ' ' + str2

    if is_cff:
        cff_table = font['CFF '].cff
        if string_source == 'cff_1':
            string = str(cff_table.fontNames[0])

        if string_source == 'cff_2':
            string = str(cff_table.topDictIndex[0].FullName)

    return string


# Replaced by click.clear()

def clear():
    from os import name, system
    if name == 'nt':
        _ = system('cls')
    else:
        _ = system('clear')


def is_nth_bit_set(x: int, n: int) -> bool:
    if x & (1 << n):
        return True
    return False


def set_nth_bit(x: int, n: int) -> int:
    return x | 1 << n


def unset_nth_bit(x: int, n: int) -> int:
    return x & ~(1 << n)
